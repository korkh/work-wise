import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useTranslation } from "react-i18next";
import { memo } from "react";
import { DateInput } from "@/shared/ui/DateInput";
import { Input } from "@/shared/ui/Input";
import { ColumnStack, RowStack } from "@/shared/ui/Stack";
import { TextHolder } from "@/shared/ui/TextHolder";
export const ContractDetails = memo(function ContractDetails(props) {
    const { data, readonly, onChangePosition, onChangeContractNumber, onChangeAcceptionDate, onChangeDismissalDate, onChangeeAnnualHolidays, onChangeFatherHolidays, onChangeEmployementDays, onChangeUnpaidHolidays, onChangeTruancyDays, onChangeAllowedAbsenceDays, onChangeUnusedHolidays, } = props;
    const { t } = useTranslation();
    return (_jsxs(RowStack, { max: true, gap: "24", children: [_jsxs(ColumnStack, { gap: "16", max: true, children: [_jsx(TextHolder, { title: "Contract details" }), _jsx(Input, { size: "s", value: data?.contractData?.position, label: t("Capacity"), onChange: onChangePosition, readonly: readonly, "data-testid": "EmployeeDetailsCard.position" }), _jsx(Input, { size: "s", width: "70%", justify: "between", value: data?.contractData?.contractNumber, label: t("Contract number"), onChange: onChangeContractNumber, readonly: readonly, "data-testid": "EmployeeDetailsCard.contractNumber" }), _jsx(DateInput, { gap: "8", width: "70%", justify: "between", selected: data?.contractData?.acceptionDate, onChange: onChangeAcceptionDate || ((_, _event) => { }), label: t("Accepted on"), readonly: readonly, "data-testid": "EmployeeDetailsCard.acceptionDate" }), _jsx(DateInput, { gap: "8", width: "70%", justify: "between", selected: data?.contractData?.dismissalDate, onChange: onChangeDismissalDate || ((_, _event) => { }), label: t("Dismissal date"), readonly: readonly, "data-testid": "EmployeeDetailsCard.dismissalDate" }), _jsx(Input, { size: "s", width: "70%", justify: "between", value: data?.contractData?.annualHolidays, label: t("Annual holidays"), onChange: onChangeeAnnualHolidays, readonly: readonly, "data-testid": "EmployeeDetailsCard.annualHolidays" }), _jsx(Input, { size: "s", width: "70%", justify: "between", value: data?.contractData?.fatherHolidays?.toString(), label: t("Father holidays"), onChange: onChangeFatherHolidays, readonly: readonly, "data-testid": "EmployeeDetailsCard.fatherHolidays" })] }), _jsxs(ColumnStack, { gap: "16", max: true, children: [_jsx(Input, { size: "s", type: "number", width: "70%", justify: "between", value: data?.contractData?.employmentDays?.toString(), label: t("Employment days"), onChange: onChangeEmployementDays, readonly: true, "data-testid": "EmployeeDetailsCard.employmentDays" }), _jsx(Input, { size: "s", width: "70%", justify: "between", value: data?.contractData?.unpaidHolidays, label: t("Unpaid holidays"), onChange: onChangeUnpaidHolidays, readonly: readonly, "data-testid": "EmployeeDetailsCard.unpaidHolidays" }), _jsx(Input, { size: "s", width: "70%", justify: "between", value: data?.contractData?.truancyDays, label: t("Truancy days"), onChange: onChangeTruancyDays, readonly: readonly, "data-testid": "EmployeeDetailsCard.truancyDays" }), _jsx(Input, { size: "s", width: "70%", justify: "between", value: data?.contractData?.allowedAbsenceDays, label: t("Allowed absence days"), onChange: onChangeAllowedAbsenceDays, readonly: readonly, "data-testid": "EmployeeDetailsCard.allowedAbsenceDays" }), _jsx(Input, { size: "s", width: "70%", justify: "between", value: data?.contractData?.unusedHolidays, label: t("Unused holidays"), onChange: onChangeUnusedHolidays, readonly: true, "data-testid": "EmployeeDetailsCard.unusedHolidays" })] })] }));
});
